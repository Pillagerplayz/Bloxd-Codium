/// <reference path="./bloxd-types.d.ts" />

export class api {
    static getPosition(entityId: EntityId): [number, number, number];
    static setPosition(entityId: EntityId, x: number | number[], y: number, z: number): void;
    static getPlayerIds(): PlayerId[];
    static playerIsInGame(playerId: PlayerId): boolean;
    static playerIsLoggedIn(playerId: PlayerId): boolean;
    static getPlayerPartyWhenJoined(playerId: PlayerId): PNull<{ playerDbIds: PlayerDbId[] }>;
    static getNumPlayers(): number;
    static getBlockCoordinatesPlayerStandingOn(playerId: PlayerId): number[][];
    static getBlockTypesPlayerStandingOn(playerId: PlayerId): any[];
    static getUnitCoordinatesLifeformWithin(lifeformId: LifeformId): number[][];
    static showShopTutorial(playerId: PlayerId): void;
    static getShieldAmount(entityId: EntityId): number;
    static setShieldAmount(lifeformId: LifeformId, newShieldAmount: number): void;
    static getHealth(entityId: PlayerId): number;
    static applyHealthChange(lifeformId: LifeformId, changeAmount: number, whoDidDamage: LifeformId | { lifeformId: LifeformId; withItem: string }, broadcastLifeformHurt: boolean): boolean;
    static setHealth(lifeformId: LifeformId, newHealth: PNull<number>, whoDidDamage: LifeformId | { lifeformId: LifeformId; withItem: string }, increaseMaxHealthIfNeeded: boolean): boolean;
    static applyMeleeHit(hittingEId: LifeformId, hitEId: LifeformId, dirFacing: number[], bodyPartHit: PNull<PlayerBodyPart>, overrides: MeleeOverides): boolean;
    static attemptApplyDamage(opts: PlayerAttemptDamageOtherPlayerOpts): boolean;
    static forceRespawn(playerId: PlayerId, respawnPos: number[]): void;
    static killLifeform(lifeformId: LifeformId, whoKilled: LifeformId | { lifeformId: LifeformId; withItem: string }): void;
    static getCurrentKillstreak(playerId: PlayerId): number;
    static clearKillstreak(playerId: PlayerId): void;
    static isAlive(lifeformId: LifeformId): boolean;
    static broadcastMessage(message: string | CustomTextStyling, style: { fontWeight?: number | "normal" | "bold" | "bolder" | "lighter" | "italic", color?: string }): void;
    static sendMessage(playerId: PlayerId, message: string | CustomTextStyling, style: { fontWeight?: number | "normal" | "bold" | "bolder" | "lighter" | "italic", color?: string }): void;
    static sendFlyingMiddleMessage(playerId: PlayerId, message: CustomTextStyling, distanceFromAction: number): void;
    static setClientOption(playerId: PlayerId, option: PassedOption, value: ClientOptions[PassedOption]): void;
    static getClientOption(playerId: PlayerId, option: PassedOption): ClientOptions[PassedOption];
    static setClientOptions(playerId: PlayerId, optionsObj: Partial<ClientOptions>): void;
    static setClientOptionToDefault(playerId: PlayerId, option: PassedOption): void;
    static setTargetedPlayerSettingForEveryone(targetedPlayerId: PlayerId, settingName: Setting, settingValue: OtherEntitySettings[Setting], includeNewJoiners: boolean): void;
    static setEveryoneSettingForPlayer(playerId: PlayerId, settingName: Setting, settingValue: OtherEntitySettings[Setting], includeNewJoiners: boolean): void;
    static setOtherEntitySetting(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingName: Setting, settingValue: OtherEntitySettings[Setting]): void;
    static setOtherEntitySettings(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingsObject: Partial<OtherEntitySettings>): void;
    static getOtherEntitySetting(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingName: Setting): OtherEntitySettings[Setting];
    static playParticleEffect(opts: TempParticleSystemOpts, clientPredictedBy: PlayerId): void;
    static getEntityName(entityId: EntityId): string;
    static getPlayerId(playerName: string): PNull<PlayerId>;
    static getPlayerDbId(playerId: PlayerId): PNull<PlayerDbId>;
    static getPlayerIdFromDbId(dbId: PlayerDbId): PNull<PlayerId>;
    static kickPlayer(playerId: PlayerId, reason: string): void;
    static isBlockInLoadedChunk(x: number, y: number, z: number): boolean;
    static getBlock(x: number | number[], y: number, z: number): string;
    static getBlockId(x: number | number[], y: number, z: number): string;
    static setBlock(x: number | number[], y: number | string, z: number, blockName: string): void;
    static attemptWorldChangeBlock(initiatorDbId: PNull<PlayerDbId>, x: number, y: number, z: number, blockName: string, extraInfo: WorldBlockChangedInfo): "preventChange" | "preventDrop" | void;
    static getBlockSolidity(x: number | number[], y: number, z: number): boolean;
    static setBlockRect(pos1: number[], pos2: number[], blockName: string): void;
    static setBlockWalls(pos1: number[], pos2: number[], blockName: string, hasFloor: boolean, hasCeiling: boolean): void;
    static getChunk(pos: number[]): PNull<object>;
    static getEmptyChunk(): PNull<object>;
    static getMetaInfo(blockName: string | null | undefined): object;
    static blockNameToBlockId(blockName: string, allowInvalidBlock?: boolean): PNull<number>;
    static blockIdToBlockName(blockId: number): PNull<string>;
    static blockCoordToChunkId(pos: number[]): string;
    static chunkIdToBotLeftCoord(chunkId: string): [number, number, number];
    static sendTopRightHelper(playerId: PlayerId, icon: string, text: string, opts: TopRightHelperOpts): void;
    static isMobile(playerId: PlayerId): boolean;
    static createItemDrop(x: number, y: number, z: number, itemName: string, amount?: number, mergeItems?: boolean, attributes?: object, timeTillDespawn?: number): PNull<EntityId>;
    static setCantPickUpItem(playerId: PlayerId, itemId: EntityId): void;
    static deleteItemDrop(itemId: EntityId): void;
    static getInitialItemMetadata(itemName: string): Partial<object & object>;
    static getItemStat(lifeformId: PNull<LifeformId>, itemName: string, stat: K): AnyMetadataItem[K];
    static setCameraDirection(playerId: PlayerId, direction: number[]): void;
    static setPlayerOpacity(playerId: PlayerId, opacity: number): void;
    static setPlayerOpacityForOnePlayer(playerIdWhoViewsOpacityPlayer: PlayerId, playerIdOfOpacityPlayer: PlayerId, opacity: number): void;
    static now(): number;
    static checkValid(entityId?: PNull<EntityId>): boolean;
    static setCanChangeBlock(playerId: PlayerId, x: number, y: number, z: number): void;
    static setCantChangeBlock(playerId: PlayerId, x: number, y: number, z: number): void;
    static setCanChangeBlockType(playerId: PlayerId, blockName: string): void;
    static setCantChangeBlockType(playerId: PlayerId, blockName: string): void;
    static resetCanChangeBlockType(playerId: PlayerId, blockName: string): void;
    static setCanChangeBlockRect(playerId: PlayerId, pos1: number[], pos2: number[]): void;
    static setCantChangeBlockRect(playerId: PlayerId, pos1: number[], pos2: number[]): void;
    static resetCanChangeBlockRect(playerId: PlayerId, pos1: number[], pos2: number[]): void;
    static setWalkThroughType(playerId: PlayerId, blockName: string, disable?: boolean): void;
    static setWalkThroughRect(playerId: PlayerId, pos1: number[], pos2: number[],)
}

// Make api globally available
declare global {
    var api: {
        getPosition(entityId: EntityId): [number, number, number];
        setPosition(entityId: EntityId, x: number | number[], y: number, z: number): void;
        getPlayerIds(): PlayerId[];
        playerIsInGame(playerId: PlayerId): boolean;
        playerIsLoggedIn(playerId: PlayerId): boolean;
        getPlayerPartyWhenJoined(playerId: PlayerId): PNull<{ playerDbIds: PlayerDbId[] }>;
        getNumPlayers(): number;
        getBlockCoordinatesPlayerStandingOn(playerId: PlayerId): number[][];
        getBlockTypesPlayerStandingOn(playerId: PlayerId): any[];
        getUnitCoordinatesLifeformWithin(lifeformId: LifeformId): number[][];
        showShopTutorial(playerId: PlayerId): void;
        getShieldAmount(entityId: EntityId): number;
        setShieldAmount(lifeformId: LifeformId, newShieldAmount: number): void;
        getHealth(entityId: PlayerId): number;
        applyHealthChange(lifeformId: LifeformId, changeAmount: number, whoDidDamage: LifeformId | { lifeformId: LifeformId; withItem: string }, broadcastLifeformHurt: boolean): boolean;
        setHealth(lifeformId: LifeformId, newHealth: PNull<number>, whoDidDamage: LifeformId | { lifeformId: LifeformId; withItem: string }, increaseMaxHealthIfNeeded: boolean): boolean;
        applyMeleeHit(hittingEId: LifeformId, hitEId: LifeformId, dirFacing: number[], bodyPartHit: PNull<PlayerBodyPart>, overrides: MeleeOverides): boolean;
        attemptApplyDamage(options: PlayerAttemptDamageOtherPlayerOpts): boolean;
        forceRespawn(playerId: PlayerId, respawnPos: number[]): void;
        killLifeform(lifeformId: LifeformId, whoKilled: LifeformId | { lifeformId: LifeformId; withItem: string }): void;
        getCurrentKillstreak(playerId: PlayerId): number;
        clearKillstreak(playerId: PlayerId): void;
        isAlive(lifeformId: LifeformId): boolean;
        broadcastMessage(message: string | CustomTextStyling, style: { fontWeight?: number | "normal" | "bold" | "bolder" | "lighter" | "italic", color?: string }): void;
        sendMessage(playerId: PlayerId, message: string | CustomTextStyling, style: { fontWeight?: number | "normal" | "bold" | "bolder" | "lighter" | "italic", color?: string }): void;
        sendFlyingMiddleMessage(playerId: PlayerId, message: CustomTextStyling, distanceFromAction: number): void;
        setClientOption(playerId: PlayerId, option: PassedOption, value: ClientOptions[PassedOption]): void;
        getClientOption(playerId: PlayerId, option: PassedOption): ClientOptions[PassedOption];
        setClientOptions(playerId: PlayerId, optionsObj: Partial<ClientOptions>): void;
        setClientOptionToDefault(playerId: PlayerId, option: PassedOption): void;
        setTargetedPlayerSettingForEveryone(targetedPlayerId: PlayerId, settingName: Setting, settingValue: OtherEntitySettings[Setting], includeNewJoiners: boolean): void;
        setEveryoneSettingForPlayer(playerId: PlayerId, settingName: Setting, settingValue: OtherEntitySettings[Setting], includeNewJoiners: boolean): void;
        setOtherEntitySetting(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingName: Setting, settingValue: OtherEntitySettings[Setting]): void;
        setOtherEntitySettings(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingsObject: Partial<OtherEntitySettings>): void;
        getOtherEntitySetting(relevantPlayerId: PlayerId, targetedEntityId: EntityId, settingName: Setting): OtherEntitySettings[Setting];
        playParticleEffect(opts: TempParticleSystemOpts, clientPredictedBy: PlayerId): void;
        getEntityName(entityId: EntityId): string;
        getPlayerId(playerName: string): PNull<PlayerId>;
        getPlayerDbId(playerId: PlayerId): PNull<PlayerDbId>;
        getPlayerIdFromDbId(dbId: PlayerDbId): PNull<PlayerId>;
        kickPlayer(playerId: PlayerId, reason: string): void;
        isBlockInLoadedChunk(x: number, y: number, z: number): boolean;
        getBlock(x: number | number[], y: number, z: number): string;
        getBlockId(x: number | number[], y: number, z: number): string;
        setBlock(x: number | number[], y: number | string, z: number, blockName: string): void;
        attemptWorldChangeBlock(initiatorDbId: PNull<PlayerDbId>, x: number, y: number, z: number, blockName: string, extraInfo: WorldBlockChangedInfo): "preventChange" | "preventDrop" | void;
        getBlockSolidity(x: number | number[], y: number, z: number): boolean;
        setBlockRect(pos1: number[], pos2: number[], blockName: string): void;
        setBlockWalls(pos1: number[], pos2: number[], blockName: string, hasFloor: boolean, hasCeiling: boolean): void;
        getChunk(pos: number[]): PNull<object>;
        getEmptyChunk(): PNull<object>;
        getMetaInfo(blockName: string | null | undefined): object;
    };
}

// Re-export everything for module usage
export { api };